import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()

        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.8+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

apply plugin: 'android'
apply plugin: 'crashlytics'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}


android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 19
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug{
            //Don't change the value of release notes as we are searching for the value and replacing it with actual release notes in build jobs
            ext.betaDistributionReleaseNotes='Release Notes for this build.'
            ext.betaDistributionGroupAliases='paypalhere-sdk'
        }
    }

    lintOptions {
        abortOnError false
    }
    
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        //compile project (':sdk')
        compile('com.paypal.merchant.sdk:paypal-sdk:1.5.1@aar')
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:19.1.0'
    compile 'com.android.support:support-v4:18.0.0'
    compile 'com.google.android.gms:play-services:4.0.30'
    compile 'com.crashlytics.android:crashlytics:1.+'
}

task incrementVersionCode << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    matcherVersionCode.find()
    def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
    def mNextVersionCode = mVersionCode + 1
    def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
    manifestFile.write(manifestContent)
}
