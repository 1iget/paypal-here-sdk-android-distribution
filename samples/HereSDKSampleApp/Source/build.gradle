import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}


android {
    compileSdkVersion 21
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.paypal.heresdk.sampleapp"
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            //Don't change the value of release notes as we are searching for the value and replacing it with actual release notes in build jobs
            ext.betaDistributionReleaseNotes='External SDK Release 1.6.8'
            ext.betaDistributionGroupAliases='paypalhere-sdk'
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
        flatDir {
            dirs 'libs'
        }
        jcenter()
    }

    dependencies {
        api(name:'paypal-here-sdk', ext:'aar')
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    api 'com.android.support:support-v4:21.0.0'
    api 'com.android.support:appcompat-v7:21.0.2'
    api 'com.google.android.gms:play-services-location:8.1.0'
    api('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }
}

task incrementVersionCode << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    matcherVersionCode.find()
    def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
    def mNextVersionCode = mVersionCode + 1
    def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
    manifestFile.write(manifestContent)
}
